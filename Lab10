#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

// Trie node
struct TrieNode {
    struct TrieNode *children[ALPHABET_SIZE];
    int isEndOfWord;
    int occurrences;
};

// Trie structure
struct Trie {
    struct TrieNode *root;
};

// Initializes a trie structure
struct Trie *createTrie()
{
    struct Trie *pTrie = (struct Trie *)malloc(sizeof(struct Trie));
    pTrie->root = (struct TrieNode *)malloc(sizeof(struct TrieNode));
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        pTrie->root->children[i] = NULL;
    }
    pTrie->root->isEndOfWord = 0; // Initialize isEndOfWord to 0
    pTrie->root->occurrences = 0;
    return pTrie;
}

// Inserts a word into the trie structure
void insert(struct Trie *pTrie, char *word)
{
    struct TrieNode *current = pTrie->root;
    for (int i = 0; i < strlen(word); i++) {
        int index = word[i] - 'a';
        if (current->children[index] == NULL) {
            current->children[index] = (struct TrieNode *)malloc(sizeof(struct TrieNode));
            for (int j = 0; j < ALPHABET_SIZE; j++) {
                current->children[index]->children[j] = NULL;
            }
            current->children[index]->isEndOfWord = 0;
            current->children[index]->occurrences = 0;
        }
        current = current->children[index];
    }
    current->isEndOfWord = 1;
    current->occurrences++;
}

// Computes the number of occurrences of a word in the trie
int numberOfOccurrences(struct Trie *pTrie, char *word)
{
    struct TrieNode *current = pTrie->root;
    for (int i = 0; i < strlen(word); i++) {
        int index = word[i] - 'a';
        if (current->children[index] == NULL) {
            return 0;
        }
        current = current->children[index];
    }
    return (current != NULL && current->isEndOfWord); // Check if the node represents end of word
}

// Deallocates the trie structure
void deallocateNodes(struct TrieNode *node)
{
    if (node == NULL)
        return;

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (node->children[i] != NULL) { // Check if the child node is not NULL
            deallocateNodes(node->children[i]);
        }
    }

    free(node);
}

struct Trie *deallocateTrie(struct Trie *pTrie)
{
    if (pTrie != NULL) {
        deallocateNodes(pTrie->root);
        free(pTrie);
    }
    return NULL;
}

// Reads words from a file and stores them into an array
int readDictionary(char *filename, char **pInWords)
{
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        return 0;
    }

    int count = 0;
    char word[100];
    while (fscanf(file, "%s", word) != EOF && count < 256) {
        pInWords[count] = strdup(word);
        count++;
    }

    fclose(file);
    return count;
}

int main(void)
{
    char *inWords[256]; // Assuming maximum of 256 words in dictionary

    int numWords = readDictionary("dictionary.txt", inWords);
    for (int i = 0; i < numWords; ++i) {
        printf("%s\n", inWords[i]);
    }

    struct Trie *pTrie = createTrie();
    for (int i = 0; i < numWords; i++) {
        insert(pTrie, inWords[i]);
    }

    char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
    for (int i = 0; i < 5; i++) {
        printf("\t%s : %d\n", pWords[i], numberOfOccurrences(pTrie, pWords[i]));
    }

    pTrie = deallocateTrie(pTrie); // Deallocate the trie structure

    if (pTrie != NULL) {
        printf("There is an error in this program\n");
    }

    return 0;
}
